{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\dg-react-test\\\\src\\\\pages\\\\MovieList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport GridItem from \"../components/GridItem\";\nimport useFetch from \"../hooks/useFetch\";\nimport { updateHeader, updateMovieData } from \"../store/actions\";\nimport { API } from \"../utils/constant\";\nimport Loader from \"../components/Loader\";\nimport ErrorBlock from \"../components/ErrorBlock\";\nimport { filterDataByName, setKeyWithIndex } from \"../utils\";\n/**\r\n *  @description - Movie List View Page.\r\n *  @returns {Node} - Returns Movie List.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MovieList = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [pageNumber, setPageNumber] = useState(1);\n  const [list, setList] = useState([]);\n  const {\n    movieData,\n    searchData\n  } = useSelector(state => state);\n  const {\n    data,\n    hasMore,\n    loading\n  } = useFetch(API.PAGE, pageNumber);\n  useEffect(() => {\n    if (data) {\n      var _data$contentItems;\n\n      const pageItems = (data === null || data === void 0 ? void 0 : (_data$contentItems = data[\"content-items\"]) === null || _data$contentItems === void 0 ? void 0 : _data$contentItems.content) || [];\n      dispatch(updateHeader({\n        title: (data === null || data === void 0 ? void 0 : data.title) || \"\"\n      }));\n      dispatch(updateMovieData(pageItems));\n      const updatedList = [...list, ...pageItems];\n      let filteredList = searchData !== null && searchData !== void 0 && searchData.term ? filterDataByName(searchData.term, updatedList) : updatedList;\n      setList(filteredList);\n    }\n  }, [data]);\n  const observer = useRef();\n  const lastElementRef = useCallback(node => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        setPageNumber(prevPageNumber => prevPageNumber + 1);\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [loading, hasMore]);\n  useEffect(() => {\n    if (searchData !== null && searchData !== void 0 && searchData.term) {\n      const updatedList = filterDataByName(searchData === null || searchData === void 0 ? void 0 : searchData.term, movieData);\n      setList(updatedList);\n    } else {\n      setList(movieData);\n    }\n  }, [searchData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full p-4 grid gap-4 grid-cols-3 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 xl:grid-cols-10 2xl:grid-cols-12\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ErrorBlock, {\n      title: \"Error!\",\n      subTitle: \"Something went wrong.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MovieList, \"aQ7xZC+5+IzNdaiSYyG9BUKNG1A=\", false, function () {\n  return [useDispatch, useSelector, useFetch];\n});\n\n_c = MovieList;\nexport default MovieList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"sources":["C:/Projects/dg-react-test/src/pages/MovieList.js"],"names":["React","useState","useEffect","useRef","useCallback","useDispatch","useSelector","GridItem","useFetch","updateHeader","updateMovieData","API","Loader","ErrorBlock","filterDataByName","setKeyWithIndex","MovieList","dispatch","pageNumber","setPageNumber","list","setList","movieData","searchData","state","data","hasMore","loading","PAGE","pageItems","content","title","updatedList","filteredList","term","observer","lastElementRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPageNumber","observe"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport GridItem from \"../components/GridItem\";\r\nimport useFetch from \"../hooks/useFetch\";\r\nimport { updateHeader, updateMovieData } from \"../store/actions\";\r\nimport { API } from \"../utils/constant\";\r\nimport Loader from \"../components/Loader\";\r\nimport ErrorBlock from \"../components/ErrorBlock\";\r\nimport { filterDataByName, setKeyWithIndex } from \"../utils\";\r\n\r\n/**\r\n *  @description - Movie List View Page.\r\n *  @returns {Node} - Returns Movie List.\r\n */\r\nconst MovieList = () => {\r\n  const dispatch = useDispatch();\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n  const [list, setList] = useState([]);\r\n  const { movieData, searchData } = useSelector((state) => state);\r\n\r\n  const { data, hasMore, loading } = useFetch(API.PAGE, pageNumber);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      const pageItems = data?.[\"content-items\"]?.content || [];\r\n      dispatch(updateHeader({ title: data?.title || \"\" }));\r\n      dispatch(updateMovieData(pageItems));\r\n      const updatedList = [...list, ...pageItems];\r\n      let filteredList = searchData?.term\r\n        ? filterDataByName(searchData.term, updatedList)\r\n        : updatedList;\r\n      setList(filteredList);\r\n    }\r\n  }, [data]);\r\n\r\n  const observer = useRef();\r\n  const lastElementRef = useCallback(\r\n    (node) => {\r\n      if (loading) return;\r\n      if (observer.current) observer.current.disconnect();\r\n      observer.current = new IntersectionObserver((entries) => {\r\n        if (entries[0].isIntersecting && hasMore) {\r\n          setPageNumber((prevPageNumber) => prevPageNumber + 1);\r\n        }\r\n      });\r\n      if (node) observer.current.observe(node);\r\n    },\r\n    [loading, hasMore]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (searchData?.term) {\r\n      const updatedList = filterDataByName(searchData?.term, movieData);\r\n      setList(updatedList);\r\n    } else {\r\n      setList(movieData);\r\n    }\r\n  }, [searchData]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"w-full p-4 grid gap-4 grid-cols-3 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 xl:grid-cols-10 2xl:grid-cols-12\">\r\n        {/* {list.map((item, index) => {\r\n          return (\r\n            <div\r\n              key={setKeyWithIndex(item.name, index)}\r\n              className=\"min-w-full\"\r\n              {...(list.length === index + 1 && {\r\n                ref: lastElementRef,\r\n              })}\r\n              data-testid=\"movie-item\"\r\n            >\r\n              <GridItem item={item} />\r\n            </div>\r\n          );\r\n        })} */}\r\n        {/* {loading &&\r\n         <Loader />\r\n        } */}\r\n      </div>\r\n      {/* {!loading && list.length === 0 && ( */}\r\n      <ErrorBlock title=\"Error!\" subTitle=\"Something went wrong.\" />\r\n      {/* )} */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieList;\r\n"]},"metadata":{},"sourceType":"module"}