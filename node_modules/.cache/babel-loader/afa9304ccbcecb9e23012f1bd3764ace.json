{"ast":null,"code":"import { useState, useCallback, useEffect } from 'react';\n\nfunction getScrollTop(target) {\n  if (target) return target.scrollTop;\n  return window.scrollY || window.pageYOffset || document.body.scrollTop || document.documentElement && document.documentElement.scrollTop || 0;\n}\n\nfunction getScrollLeft(target) {\n  if (target) return target.scrollLeft;\n  return window.scrollX || window.pageXOffset || document.body.scrollLeft || document.documentElement && document.documentElement.scrollLeft || 0;\n}\n\nfunction isBrowser() {\n  return typeof window === 'object';\n}\n\nfunction addScrollListener(listener, target) {\n  if (target === void 0) {\n    target = document;\n  }\n\n  return target.addEventListener('scroll', listener);\n}\n\nfunction removeScrollListener(listener, target) {\n  if (target === void 0) {\n    target = document;\n  }\n\n  return target.removeEventListener('scroll', listener);\n}\n\nfunction useScrollDirection(target) {\n  var _useState = useState(),\n      targetFromApi = _useState[0],\n      setTargetFromApi = _useState[1];\n\n  var _useState2 = useState(),\n      targetFromProps = _useState2[0],\n      setTargetFromProps = _useState2[1];\n\n  var _useState3 = useState(null),\n      scrollDirection = _useState3[0],\n      setScrollDirection = _useState3[1];\n\n  var targetToUse = targetFromProps || targetFromApi;\n  var isScrolling = scrollDirection !== null;\n  var isScrollingX = scrollDirection === 'LEFT' || scrollDirection === 'RIGHT';\n  var isScrollingY = scrollDirection === 'UP' || scrollDirection === 'DOWN';\n  var isScrollingUp = scrollDirection === 'UP';\n  var isScrollingDown = scrollDirection === 'DOWN';\n  var isScrollingLeft = scrollDirection === 'LEFT';\n  var isScrollingRight = scrollDirection === 'RIGHT';\n  var scrollTargetRef = useCallback(function (node) {\n    setTargetFromApi(node);\n  }, []);\n  useEffect(function () {\n    setTargetFromProps(target);\n  }, [target]);\n  useEffect(function () {\n    if (isBrowser()) {\n      var scrollTimeout;\n      var lastScrollTop = getScrollTop(targetToUse);\n      var lastScrollLeft = getScrollLeft(targetToUse);\n\n      var handleScroll = function handleScroll() {\n        // Reset scroll direction when scrolling stops\n        window.clearTimeout(scrollTimeout);\n        scrollTimeout = window.setTimeout(function () {\n          setScrollDirection(null);\n        }, 66); // Set vertical direction while scrolling\n\n        var scrollTop = getScrollTop(targetToUse);\n\n        if (scrollTop > lastScrollTop) {\n          setScrollDirection('DOWN');\n        } else if (scrollTop < lastScrollTop) {\n          setScrollDirection('UP');\n        }\n\n        lastScrollTop = scrollTop; // Set horizontal scroll direction\n\n        var scrollLeft = getScrollLeft(targetToUse);\n\n        if (scrollLeft > lastScrollLeft) {\n          setScrollDirection('RIGHT');\n        } else if (scrollLeft < lastScrollLeft) {\n          setScrollDirection('LEFT');\n        }\n\n        lastScrollLeft = scrollLeft;\n      };\n\n      addScrollListener(handleScroll, targetToUse);\n      return function () {\n        return removeScrollListener(handleScroll, targetToUse);\n      };\n    }\n  }, [targetToUse]);\n  return {\n    isScrolling: isScrolling,\n    isScrollingX: isScrollingX,\n    isScrollingY: isScrollingY,\n    isScrollingUp: isScrollingUp,\n    isScrollingDown: isScrollingDown,\n    isScrollingLeft: isScrollingLeft,\n    isScrollingRight: isScrollingRight,\n    scrollDirection: scrollDirection,\n    scrollTargetRef: scrollTargetRef\n  };\n}\n\nexport { useScrollDirection };","map":{"version":3,"sources":["C:\\Projects\\dg-react-test\\node_modules\\react-use-scroll-direction\\src\\domUtils.ts","C:\\Projects\\dg-react-test\\node_modules\\react-use-scroll-direction\\src\\useScrollDirection.ts"],"names":["getScrollTop","target","window","document","getScrollLeft","isBrowser","addScrollListener","listener","removeScrollListener","useScrollDirection","targetFromApi","setTargetFromApi","useState","targetFromProps","setTargetFromProps","scrollDirection","setScrollDirection","targetToUse","isScrolling","isScrollingX","isScrollingY","isScrollingUp","isScrollingDown","isScrollingLeft","isScrollingRight","scrollTargetRef","useCallback","useEffect","lastScrollTop","lastScrollLeft","handleScroll","scrollTimeout","scrollTop","scrollLeft"],"mappings":"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","sourcesContent":["type ListenerFn = () => any\n\nexport function getScrollTop(target?: HTMLElement) {\n  if (target) return target.scrollTop\n  return (\n    window.scrollY ||\n    window.pageYOffset ||\n    document.body.scrollTop ||\n    (document.documentElement && document.documentElement.scrollTop) ||\n    0\n  )\n}\n\nexport function getScrollLeft(target?: HTMLElement) {\n  if (target) return target.scrollLeft\n  return (\n    window.scrollX ||\n    window.pageXOffset ||\n    document.body.scrollLeft ||\n    (document.documentElement && document.documentElement.scrollLeft) ||\n    0\n  )\n}\n\nexport function isBrowser() {\n  return typeof window === 'object'\n}\n\nexport function addScrollListener(listener: ListenerFn, target: HTMLElement | Document = document) {\n  return target.addEventListener('scroll', listener)\n}\n\nexport function removeScrollListener(\n  listener: ListenerFn,\n  target: HTMLElement | Document = document\n) {\n  return target.removeEventListener('scroll', listener)\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport {\n  isBrowser,\n  getScrollTop,\n  getScrollLeft,\n  addScrollListener,\n  removeScrollListener,\n} from './domUtils'\n\nexport type ScrollDirection = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT' | null\n\nexport interface ScrollDirectionHookResult {\n  isScrolling: boolean\n  isScrollingX: boolean\n  isScrollingY: boolean\n  isScrollingUp: boolean\n  isScrollingDown: boolean\n  isScrollingLeft: boolean\n  isScrollingRight: boolean\n  scrollDirection: ScrollDirection\n  scrollTargetRef: (node: HTMLElement) => void\n}\n\nexport function useScrollDirection(target?: HTMLElement): ScrollDirectionHookResult {\n  const [targetFromApi, setTargetFromApi] = useState<HTMLElement | undefined>()\n  const [targetFromProps, setTargetFromProps] = useState<HTMLElement | undefined>()\n  const [scrollDirection, setScrollDirection] = useState<ScrollDirection>(null)\n  const targetToUse = targetFromProps || targetFromApi\n\n  const isScrolling = scrollDirection !== null\n  const isScrollingX = scrollDirection === 'LEFT' || scrollDirection === 'RIGHT'\n  const isScrollingY = scrollDirection === 'UP' || scrollDirection === 'DOWN'\n  const isScrollingUp = scrollDirection === 'UP'\n  const isScrollingDown = scrollDirection === 'DOWN'\n  const isScrollingLeft = scrollDirection === 'LEFT'\n  const isScrollingRight = scrollDirection === 'RIGHT'\n\n  const scrollTargetRef = useCallback((node: HTMLElement) => {\n    setTargetFromApi(node)\n  }, [])\n\n  useEffect(() => {\n    setTargetFromProps(target)\n  }, [target])\n\n  useEffect(() => {\n    if (isBrowser()) {\n      let scrollTimeout: number\n      let lastScrollTop = getScrollTop(targetToUse)\n      let lastScrollLeft = getScrollLeft(targetToUse)\n\n      const handleScroll = () => {\n        // Reset scroll direction when scrolling stops\n        window.clearTimeout(scrollTimeout)\n        scrollTimeout = window.setTimeout(() => {\n          setScrollDirection(null)\n        }, 66)\n\n        // Set vertical direction while scrolling\n        const scrollTop = getScrollTop(targetToUse)\n        if (scrollTop > lastScrollTop) {\n          setScrollDirection('DOWN')\n        } else if (scrollTop < lastScrollTop) {\n          setScrollDirection('UP')\n        }\n        lastScrollTop = scrollTop\n\n        // Set horizontal scroll direction\n        const scrollLeft = getScrollLeft(targetToUse)\n        if (scrollLeft > lastScrollLeft) {\n          setScrollDirection('RIGHT')\n        } else if (scrollLeft < lastScrollLeft) {\n          setScrollDirection('LEFT')\n        }\n        lastScrollLeft = scrollLeft\n      }\n\n      addScrollListener(handleScroll, targetToUse)\n      return () => removeScrollListener(handleScroll, targetToUse)\n    }\n  }, [targetToUse])\n\n  return {\n    isScrolling,\n    isScrollingX,\n    isScrollingY,\n    isScrollingUp,\n    isScrollingDown,\n    isScrollingLeft,\n    isScrollingRight,\n    scrollDirection,\n    scrollTargetRef,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}