{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\dg-react-test\\\\src\\\\pages\\\\MovieList.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport GridItem from \"../components/GridItem\";\nimport useFetch from \"../hooks/useFetch\";\nimport { updateMovieList } from \"../store/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MovieList(props) {\n  _s();\n\n  const [page, setPage] = useState(1);\n  const {\n    data,\n    loading,\n    error,\n    refetch\n  } = useFetch(\"https://test.create.diagnal.com/data/page1.json\");\n  const [movieData, setMovieData] = useState([]);\n  console.log(\"response++++\", data);\n  useEffect(() => {\n    if (Object.keys(data).length > 0) {\n      var _data$contentItems;\n\n      dispatch(updateMovieList(data));\n      setMovieData((data === null || data === void 0 ? void 0 : (_data$contentItems = data[\"content-items\"]) === null || _data$contentItems === void 0 ? void 0 : _data$contentItems.content) || []);\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full p-4 grid gap-4 grid-cols-3 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 xl:grid-cols-10 2xl:grid-cols-12\",\n    children: movieData.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(GridItem, {\n        item: item\n      }, `${item.name.replace(\" \", \"\")}_${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MovieList, \"OcKQJiAEMtSy6woeYBr56jdTNlQ=\", false, function () {\n  return [useFetch];\n});\n\n_c = MovieList;\nMovieList.propTypes = {};\nexport default MovieList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"sources":["C:/Projects/dg-react-test/src/pages/MovieList.js"],"names":["useState","useEffect","PropTypes","GridItem","useFetch","updateMovieList","MovieList","props","page","setPage","data","loading","error","refetch","movieData","setMovieData","console","log","Object","keys","length","dispatch","content","map","item","index","name","replace","propTypes"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,eAAT,QAAgC,kBAAhC;;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AACxB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM;AAAEU,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB,MAAoCT,QAAQ,CAChD,iDADgD,CAAlD;AAGA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,EAAD,CAA1C;AAEAgB,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BP,IAA5B;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,MAAM,CAACC,IAAP,CAAYT,IAAZ,EAAkBU,MAAlB,GAA2B,CAA/B,EAAkC;AAAA;;AAChCC,MAAAA,QAAQ,CAAChB,eAAe,CAACK,IAAD,CAAhB,CAAR;AACAK,MAAAA,YAAY,CAAC,CAAAL,IAAI,SAAJ,IAAAA,IAAI,WAAJ,kCAAAA,IAAI,CAAG,eAAH,CAAJ,0EAAyBY,OAAzB,KAAoC,EAArC,CAAZ;AACD;AACF,GALQ,EAKN,CAACZ,IAAD,CALM,CAAT;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,iHAAf;AAAA,cACGI,SAAS,CAACS,GAAV,CAAc,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC9B,0BACE,QAAC,QAAD;AAEE,QAAA,IAAI,EAAED;AAFR,SACQ,GAAEA,IAAI,CAACE,IAAL,CAAUC,OAAV,CAAkB,GAAlB,EAAuB,EAAvB,CAA2B,IAAGF,KAAM,EAD9C;AAAA;AAAA;AAAA;AAAA,cADF;AAMD,KAPA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GA5BQnB,S;UAEmCF,Q;;;KAFnCE,S;AA8BTA,SAAS,CAACsB,SAAV,GAAsB,EAAtB;AAEA,eAAetB,SAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport GridItem from \"../components/GridItem\";\r\nimport useFetch from \"../hooks/useFetch\";\r\nimport { updateMovieList } from \"../store/actions\";\r\n\r\nfunction MovieList(props) {\r\n  const [page, setPage] = useState(1);\r\n  const { data, loading, error, refetch } = useFetch(\r\n    \"https://test.create.diagnal.com/data/page1.json\"\r\n  );\r\n  const [movieData, setMovieData] = useState([]);\r\n\r\n  console.log(\"response++++\", data);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(data).length > 0) {\r\n      dispatch(updateMovieList(data));\r\n      setMovieData(data?.[\"content-items\"]?.content || []);\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"w-full p-4 grid gap-4 grid-cols-3 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 xl:grid-cols-10 2xl:grid-cols-12\">\r\n      {movieData.map((item, index) => {\r\n        return (\r\n          <GridItem\r\n            key={`${item.name.replace(\" \", \"\")}_${index}`}\r\n            item={item}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nMovieList.propTypes = {};\r\n\r\nexport default MovieList;\r\n"]},"metadata":{},"sourceType":"module"}