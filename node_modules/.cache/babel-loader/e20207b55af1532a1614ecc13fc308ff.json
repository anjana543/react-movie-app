{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\dg-react-test\\\\src\\\\pages\\\\MovieList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useCallback } from \"react\";\nimport GridItem from \"../components/GridItem\";\nimport useFetch from \"../hooks/useFetch\";\nimport { updateMovieList } from \"../store/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MovieList(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const [pageNumber, setPageNumber] = useState(1);\n  const [movieData, setMovieData] = useState([]);\n  console.log(\"response++++\", data);\n  const {\n    books,\n    hasMore,\n    loading,\n    error\n  } = useBookSearch(query, pageNumber);\n  useEffect(() => {\n    if (data) {\n      var _data, _data$contentItems;\n\n      dispatch(updateMovieList(data));\n      const pageItems = ((_data = data) === null || _data === void 0 ? void 0 : (_data$contentItems = _data[\"content-items\"]) === null || _data$contentItems === void 0 ? void 0 : _data$contentItems.content) || [];\n      setMovieData([...movieData, ...pageItems]);\n    }\n  }, [data]);\n  const observer = useRef();\n  const lastBookElementRef = useCallback(node => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        setPageNumber(prevPageNumber => prevPageNumber + 1);\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [loading, hasMore]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full p-4 grid gap-4 grid-cols-3 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 xl:grid-cols-10 2xl:grid-cols-12\",\n    children: [movieData.map((item, index) => {\n      if (movieData.length === index + 1) {\n        const key = `${item.name.replaceAll(\" \", \"-\").toLowerCase()}-${index}`;\n        return /*#__PURE__*/_jsxDEV(GridItem, {\n          item: item,\n          ref: lastBookElementRef\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 18\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(GridItem, {\n          item: item\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 18\n        }, this);\n      }\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: loading && \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error && \"Error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MovieList, \"6AKLYg9rz2t80kLYfMyUMC7DKxo=\", true, function () {\n  return [useDispatch];\n});\n\n_c = MovieList;\nexport default MovieList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"sources":["C:/Projects/dg-react-test/src/pages/MovieList.js"],"names":["React","useState","useRef","useCallback","GridItem","useFetch","updateMovieList","useDispatch","useSelector","MovieList","props","dispatch","pageNumber","setPageNumber","movieData","setMovieData","console","log","data","books","hasMore","loading","error","useBookSearch","query","useEffect","pageItems","content","observer","lastBookElementRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPageNumber","observe","map","item","index","length","key","name","replaceAll","toLowerCase"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useCallback } from \"react\";\r\nimport GridItem from \"../components/GridItem\";\r\nimport useFetch from \"../hooks/useFetch\";\r\nimport { updateMovieList } from \"../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nfunction MovieList(props) {\r\n  const dispatch = useDispatch();\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n  const [movieData, setMovieData] = useState([]);\r\n  console.log(\"response++++\", data);\r\n\r\n  const { books, hasMore, loading, error } = useBookSearch(query, pageNumber);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      dispatch(updateMovieList(data));\r\n      const pageItems = data?.[\"content-items\"]?.content || [];\r\n      setMovieData([...movieData, ...pageItems]);\r\n    }\r\n  }, [data]);\r\n\r\n  const observer = useRef();\r\n  const lastBookElementRef = useCallback(\r\n    (node) => {\r\n      if (loading) return;\r\n      if (observer.current) observer.current.disconnect();\r\n      observer.current = new IntersectionObserver((entries) => {\r\n        if (entries[0].isIntersecting && hasMore) {\r\n          setPageNumber((prevPageNumber) => prevPageNumber + 1);\r\n        }\r\n      });\r\n      if (node) observer.current.observe(node);\r\n    },\r\n    [loading, hasMore]\r\n  );\r\n\r\n  return (\r\n    <div className=\"w-full p-4 grid gap-4 grid-cols-3 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 xl:grid-cols-10 2xl:grid-cols-12\">\r\n      {movieData.map((item, index) => {\r\n        if (movieData.length === index + 1) {\r\n          const key = `${item.name\r\n            .replaceAll(\" \", \"-\")\r\n            .toLowerCase()}-${index}`;\r\n          return <GridItem key={key} item={item} ref={lastBookElementRef} />;\r\n        } else {\r\n          return <GridItem key={key} item={item} />;\r\n        }\r\n      })}\r\n      <div>{loading && \"Loading...\"}</div>\r\n      <div>{error && \"Error\"}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MovieList;\r\n"]},"metadata":{},"sourceType":"module"}