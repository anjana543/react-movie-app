{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useFetch = (url, options) => {\n  _s();\n\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n\n    const doFetch = async () => {\n      setLoading(true);\n\n      try {\n        const res = await fetch(url, options);\n        const json = await res.json();\n\n        if (!signal.aborted) {\n          setResponse(json === null || json === void 0 ? void 0 : json.page);\n        }\n      } catch (e) {\n        if (!signal.aborted) {\n          setError(e);\n        }\n      } finally {\n        if (!signal.aborted) {\n          setLoading(false);\n        }\n      }\n    };\n\n    doFetch();\n    return () => {\n      abortController.abort();\n    };\n  }, []);\n  return {\n    response,\n    error,\n    loading\n  };\n};\n\n_s(useFetch, \"cEBVOhP4wojI5uzjyBIGsk8Aio4=\");\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Projects/dg-react-test/src/hooks/useFetch.jsx"],"names":["useState","useEffect","useFetch","url","options","response","setResponse","error","setError","loading","setLoading","abortController","AbortController","signal","doFetch","res","fetch","json","aborted","page","e","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAAA;;AACjC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACA,UAAMC,MAAM,GAAGF,eAAe,CAACE,MAA/B;;AACA,UAAMC,OAAO,GAAG,YAAY;AAC1BJ,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAI;AACF,cAAMK,GAAG,GAAG,MAAMC,KAAK,CAACb,GAAD,EAAMC,OAAN,CAAvB;AACA,cAAMa,IAAI,GAAG,MAAMF,GAAG,CAACE,IAAJ,EAAnB;;AACA,YAAI,CAACJ,MAAM,CAACK,OAAZ,EAAqB;AACnBZ,UAAAA,WAAW,CAACW,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEE,IAAP,CAAX;AACD;AACF,OAND,CAME,OAAOC,CAAP,EAAU;AACV,YAAI,CAACP,MAAM,CAACK,OAAZ,EAAqB;AACnBV,UAAAA,QAAQ,CAACY,CAAD,CAAR;AACD;AACF,OAVD,SAUU;AACR,YAAI,CAACP,MAAM,CAACK,OAAZ,EAAqB;AACnBR,UAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF;AACF,KAjBD;;AAkBAI,IAAAA,OAAO;AACP,WAAO,MAAM;AACXH,MAAAA,eAAe,CAACU,KAAhB;AACD,KAFD;AAGD,GAzBQ,EAyBN,EAzBM,CAAT;AA0BA,SAAO;AAAEhB,IAAAA,QAAF;AAAYE,IAAAA,KAAZ;AAAmBE,IAAAA;AAAnB,GAAP;AACD,CA/BD;;GAAMP,Q;;AAiCN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useFetch = (url, options) => {\r\n  const [response, setResponse] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    const signal = abortController.signal;\r\n    const doFetch = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const res = await fetch(url, options);\r\n        const json = await res.json();\r\n        if (!signal.aborted) {\r\n          setResponse(json?.page);\r\n        }\r\n      } catch (e) {\r\n        if (!signal.aborted) {\r\n          setError(e);\r\n        }\r\n      } finally {\r\n        if (!signal.aborted) {\r\n          setLoading(false);\r\n        }\r\n      }\r\n    };\r\n    doFetch();\r\n    return () => {\r\n      abortController.abort();\r\n    };\r\n  }, []);\r\n  return { response, error, loading };\r\n};\r\n\r\nexport default useFetch;\r\n"]},"metadata":{},"sourceType":"module"}